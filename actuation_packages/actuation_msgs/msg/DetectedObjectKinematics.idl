// generated from rosidl_adapter/resource/msg.idl.em
// with input from autoware_perception_msgs/msg/DetectedObjectKinematics.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/PoseWithCovariance.idl"
#include "geometry_msgs/msg/TwistWithCovariance.idl"

module autoware_perception_msgs {
  module msg {
    module DetectedObjectKinematics_Constants {
      const uint8 UNAVAILABLE = 0;
      @verbatim (language="comment", text=
        "The orientation is determined only up to a sign flip. For instance, assume that cars are" "\n"        "longer than they are wide, and the perception pipeline can accurately estimate the" "\n"        "dimensions of a car. It should set the orientation to coincide with the major axis, with" "\n"        "the sign chosen arbitrarily, and use this tag to signify that the orientation could" "\n"        "point to the front or the back.")
      const uint8 SIGN_UNKNOWN = 1;
      @verbatim (language="comment", text=
        "The full orientation is available. Use e.g. for machine-learning models that can" "\n"        "differentiate between the front and back of a vehicle.")
      const uint8 AVAILABLE = 2;
    };
    @verbatim (language="comment", text=
      "Only position is available, orientation is empty. Note that the shape can be an oriented" "\n"
      "bounding box but the direction the object is facing is unknown, in which case" "\n"
      "orientation should be empty.")
    struct DetectedObjectKinematics {
      geometry_msgs::msg::PoseWithCovariance pose_with_covariance;

      boolean has_position_covariance;

      uint8 orientation_availability;

      geometry_msgs::msg::TwistWithCovariance twist_with_covariance;

      boolean has_twist;

      boolean has_twist_covariance;
    };
  };
};
